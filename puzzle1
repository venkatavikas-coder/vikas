import math  # This will import math module
def sliceGenerator(colors):
    pies =[]
    pie =[]
    three_sides=[]
    for i in range(300):
        three_sides.append(colors[i])
        if((i+1)%3==0):
            pie.append(three_sides)
            three_sides=[]
            if((i+1)%3 == 0):
                pies.append(pie)
                pie =[]
    return pies 
    
    
    class Stack():
     def __init__(self):
        self.stack = []
    def push(self, a):
       self.stack.insert(0,a)
    def pop(self):
        return self.stack.pop(0)
    def top(self):
        print(self.stack[0])
    def size(self):
      return len(self.stack)
        
    stack = Stack()
    stack.push(3)
    print(stack.size())
    stack.top()
    print(stack.pop())    
    
colors_of_puzzle1 =[1+math.floor(i*math.pi%100)for i in range(1,301)]
print("the list length of the colors in puzzle one :",len(colors_of_puzzle1))
print("the colors of puzzle one : ",colors_of_puzzle1 )
pies1 = sliceGenerator(colors_of_puzzle1)
print(len(pies1))
for i in range(100):
    print(pies1[i])
    
def DFS(pies,index):
    visited = [[False, False,False] for i in range(len(pies))]
    thread1 = [[False, False,False] for i in range(len(pies))]
    thread2 = [[False, False,False] for i in range(len(pies))]
    multiplicity = [0 for i in range(100)]
    good = True
    halfSolutions = []
    halfSolution = []
    s = Stack()
    s.push([piess[0][index],index])
    halfSolution.append([pies[0][index], index])
    visited[0][index] = True
    while(s.size() != 0):
        print("This ran")
        pair = s.pop()
        if( (multiplicity[pair[0][0]] < 3) and (multiplicity[pair[0][1]] < 3) ):
            multiplicity[pair[0][0]] += 1
            multiplicity[pair[0][1]] += 1
        if(pair[1] == 29):
            halfSolutions.append(halfSolution)
            halfSolution = []
        print(pair[0][0])
        print(pair[0][1])
        print(pair[0][2])
        for i in range(3):
            if ( (visited[pair[1]+1][i] == False) and (multiplicity[pies[pair[1]+1][i][0]] < 3 and multiplicity[cubes[pair[1]+1][i][1]] < 3) ): 
                s.push([cubes[pair[1]+1][i],i])
                halfSolution.append(cubes[pair[1]+1][i])                
                print("This ran")     
    if(len(halfSolutions) == 0):
        print("No half solutions found starting from index ", index)
        
    return halfSolutions
    
    Solutions = DFS(pies1,0)
print(Solutions)

